@startuml CriticalRegionPattern_ClassDiagram
!theme plain
title Critical Region Pattern - Class Diagram

package "Critical Region Pattern Implementation" {
    class CRRobotArmManager {
        - itsCRDisplay: CRDisplay*
        - itsRobotArm: RobotArm*
        - itsUserInput: UserInput*
        --
        + Init()
        + Cleanup()
        + Create(): CRRobotArmManager*
        + Destroy()
        --
        + motorZero()
        + moveRobotArm()
        --
        + getItsCRDisplay(): CRDisplay*
        + setItsCRDisplay(p_CRDisplay: CRDisplay*)
        + getItsRobotArm(): RobotArm*
        + setItsRobotArm(p_RobotArm: RobotArm*)
        + getItsUserInput(): UserInput*
        + setItsUserInput(p_UserInput: UserInput*)
    }

    class CRDisplay {
        - displayId: int
        --
        + Init()
        + Cleanup()
        + Create(): CRDisplay*
        + Destroy()
        --
        + printMsg(message: const char*)
        + printInt(prefix: const char*, value: int)
    }

    class RobotArm {
        - currentX: int
        - currentY: int
        - currentZ: int
        - isMoving: int
        --
        + Init()
        + Cleanup()
        + Create(): RobotArm*
        + Destroy()
        --
        + moveTo(x: int, y: int, z: int): int
        + getCurrentX(): int
        + getCurrentY(): int
        + getCurrentZ(): int
        + isMoving(): int
    }

    class UserInput {
        - x: int
        - y: int
        - z: int
        - inputReady: int
        --
        + Init()
        + Cleanup()
        + Create(): UserInput*
        + Destroy()
        --
        + getX(): int
        + getY(): int
        + getZ(): int
        + setCoordinates(x: int, y: int, z: int)
        + isInputReady(): int
    }

    class OS_TaskSwitching <<utility>> {
        + {static} OS_disable_task_switching()
        + {static} OS_enable_task_switching()
        + {static} OS_is_task_switching_disabled(): int
    }
}

/' Relationships '/
CRRobotArmManager "1" *-- "1" CRDisplay : itsCRDisplay
CRRobotArmManager "1" *-- "1" RobotArm : itsRobotArm
CRRobotArmManager "1" *-- "1" UserInput : itsUserInput

CRRobotArmManager ..> OS_TaskSwitching : <<uses>>

/' Notes '/
note right of CRRobotArmManager::motorZero
    Critical Region:
    1. OS_disable_task_switching()
    2. RobotArm_moveTo(0,0,0)
    3. OS_enable_task_switching()
end note

note right of CRRobotArmManager::moveRobotArm
    Critical Region:
    1. Call motorZero() (outside critical region)
    2. Get user input coordinates
    3. OS_disable_task_switching()
    4. RobotArm_moveTo(x,y,z)
    5. OS_enable_task_switching()
end note

note top of OS_TaskSwitching
    Provides OS abstraction layer
    for critical region implementation.
    In real systems, these would be
    RTOS calls or hardware interrupt
    disable/enable instructions.
end note

@enduml
