Sample logic for finite state machine.
1. Idle State:
               Handles retries and transitions to Accepting or ErrorState.
2. Accepting State:
               Processes keypress events (CANCEL, digits, or ENTER) and transitions accordingly.
3. Checking Length State:
                Validates the length of the PIN and transitions to ValidatingPIN or back to Idle.
4. Validating PIN State:
                Checks if the PIN is valid and transitions to SecurityOpen or back to Idle.
5. Security Open State:
                Handles the RESET event to lock the door and transition back to Idle.
6. Default Case:
                Ensures no action is taken for undefined states.
                
This implementation provides a complete and structured finite state machine for the security supervisor system.

static eventStatus dispatchEvent(short id) {

    eventStatus res = eventNotConsumed;

    switch (activeState) {

        /* Idle State */
        case SecuritySupervisor_Idle: {
            if (id == Null_id) { /* null triggered event */
                if (retries >= 3) {
                    activeState = SecuritySupervisor_ErrorState;
                    displayMsg("ERROR: Max retries Exceeded");
                    res = eventConsumed;
                } else {
                    ++retries;
                    activeState = SecuritySupervisor_Accepting;
                    res = eventConsumed;
                }
            }
        }
        break;

        /* Accepting State */
        case SecuritySupervisor_Accepting: {
            if (id == keypress_SecuritySupervisor_Event_id) {
                /* params struct has the data in the attribute ’key’ */
                /* transition 1 */
                if (isCANCEL(params->key)) {
                    retries = 0;
                    displayMsg("Cancelled");
                    activeState = SecuritySupervisor_Idle;
                    {
                        /* state ROOT.Idle.(Entry) */
                        strcpy(pin, "");
                    }
                    res = eventConsumed;
                } else if (isDigit(params->key)) {
                    /* transition 3 */
                    addKey(params->key);
                    activeState = SecuritySupervisor_Accepting;
                    res = eventConsumed;
                } else if (isENTER(params->key)) {
                    activeState = SecuritySupervisor_CheckingLength;
                    res = eventConsumed;
                }
            }
        }
        break;

        /* Checking Length State */
        case SecuritySupervisor_CheckingLength: {
            if (id == Null_id) {
                /* transition 10 */

                if (strlen(pin) == 4) {
                    activeState = SecuritySupervisor_ValidatingPIN;
                    res = eventConsumed;
                } else {
                    /* transition 9 */
                    displayMsg("ERROR: PIN wrong length");
                    activeState = SecuritySupervisor_Idle;
                    {
                        /* state ROOT.Idle.(Entry) */
                        strcpy(pin, "");
                    }

                    res = eventConsumed;
                }
            }
        }
        break;

        /* Validating PIN State */
        case SecuritySupervisor_ValidatingPIN: {
            if (id == Null_id) {
                /* transition 13 */

                if (isValid(pin)) {
                    {
                        /* transitioon 13 */
                        unlockDoor();
                        displayMsg("Door unlocked");
                    }

                    activeState = SecuritySupervisor_SecurityOpen;

                    res = eventConsumed;
                } else {
                    {
                        /* transition 12 */
                        displayMsg("ERROR: Invalid PIN");
                    }
                    activeState = SecuritySupervisor_Idle;
                    {
                        /* state ROOT.Idle.(Entry) */
                        strcpy(pin, "");
                    }
                    res = eventConsumed;
                }
            }
        }
        break;

        /* Security Open State */
        case SecuritySupervisor_SecurityOpen: {
            if (id == keypress_SecuritySupervisor_Event_id) {
                /* params-key has the data passed with the event */
                /* transition 14 */
                if (isRESET(params->key)) {
                    {
                        /* transition 14 */
                        lockDoor();
                        retries = 0;
                        displayMsg("Door locked.");
                    }
                    activeState = SecuritySupervisor_Idle;
                    {
                        /* state ROOT.Idle.(Entry) */
                        strcpy(pin, "");
                    }
                    res = eventConsumed;
                }
            }
        }
        break;

        /* Default Case */
        default:
            break;
    }

    return res;
}