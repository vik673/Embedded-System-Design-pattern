Single Event Receptor Pattern - Sequence Diagrams
=================================================

OVERVIEW: This document illustrates the event flow and interactions in both
synchronous and asynchronous versions of the Single Event Receptor Pattern.

═══════════════════════════════════════════════════════════════════════════════

SYNCHRONOUS EVENT PROCESSING SEQUENCE
======================================

Description: Direct event processing with mutex protection for thread safety.
Events are processed immediately upon receipt.

Client              Mutex               SyncReceptor                State Machine
  │                   │                      │                           │
  │                   │                      │                           │
  │ ◄───────────── INITIALIZATION ──────────────────────────────────────► │
  │                   │                      │                           │
  │──Create()─────────│                      │                           │
  │                   │                      │                           │
  │                   │◄────setItsMutex()───│                           │
  │                   │                      │                           │
  │ ◄───────────── EVENT PROCESSING ────────────────────────────────────► │
  │                   │                      │                           │
  │──createEvent(EVDIGIT,'1')────────────────│                           │
  │                   │                      │                           │
  │──eventDispatch(event)───────────────────►│                           │
  │                   │                      │                           │
  │                   │◄────Mutex_lock()────│ 🔒 CRITICAL SECTION      │
  │                   │                      │                           │
  │                   │                      │──switch(e.eType)─────────►│
  │                   │                      │                           │
  │                   │                      │──switch(stateID)─────────►│
  │                   │                      │                           │
  │                   │                      │──exit_NoNumber()─────────►│
  │                   │                      │   [stateID: NONUMBER]     │
  │                   │                      │                           │
  │                   │                      │──ch = '1'─────────────────►│
  │                   │                      │──enter_GotNumber()───────►│
  │                   │                      │   [stateID: GOTNUMBER]    │
  │                   │                      │                           │
  │                   │                      │──enter_ProcessingWholePart()►│
  │                   │                      │   [subStateID: WHOLEPART] │
  │                   │                      │──result = 0*10 + 1 = 1───►│
  │                   │                      │                           │
  │                   │                      │◄─printf("Current: 1")─────│
  │                   │                      │                           │
  │                   │◄───Mutex_release()──│ 🔓 END CRITICAL SECTION  │
  │                   │                      │                           │
  │◄─────────────────return──────────────────│                           │
  │                   │                      │                           │

═══════════════════════════════════════════════════════════════════════════════

ASYNCHRONOUS EVENT PROCESSING SEQUENCE
=======================================

Description: Event queue buffering with signal-based notification and task loop
processing. Events are posted to a queue and processed asynchronously.

Client          EventQueue          Mutex          OSSignal      AsyncReceptor         StateMachine
  │                 │                 │                │               │                    │
  │                 │                 │                │               │                    │
  │ ◄──────────── INITIALIZATION ──────────────────────────────────────────────────────────► │
  │                 │                 │                │               │                    │
  │──Create()───────│                 │                │               │                    │
  │                 │                 │                │               │                    │
  │                 │──setItsMutex()─►│                │               │                    │
  │                 │                 │                │               │                    │
  │                 │                 │                │               │◄──setItsTSREventQueue()
  │                 │                 │                │               │                    │
  │ ◄──────────── EVENT POSTING ────────────────────────────────────────────────────────────► │
  │                 │                 │                │               │                    │
  │──createEvent()──│                 │                │               │                    │
  │                 │                 │                │               │                    │
  │──post(event)───►│                 │                │               │                    │
  │                 │                 │                │               │                    │
  │                 │──Mutex_lock()──►│ 🔒 QUEUE       │               │                    │
  │                 │                 │   PROTECTION   │               │                    │
  │                 │──enqueue────────│                │               │                    │
  │                 │──event──────────│                │               │                    │
  │                 │                 │                │               │                    │
  │                 │──Mutex_release()►│ 🔓             │               │                    │
  │                 │                 │                │               │                    │
  │                 │──postSignal()───│                │──────────────►│                    │
  │                 │                 │                │   WAKE UP     │                    │
  │                 │                 │                │               │                    │
  │ ◄──────────── ASYNCHRONOUS PROCESSING ──────────────────────────────────────────────────► │
  │                 │                 │                │               │                    │
  │                 │                 │                │               │◄──taskLoop()───────│
  │                 │                 │                │               │                    │
  │                 │                 │                │◄──waitOnSignal()─────────────────│
  │                 │                 │                │                │                    │
  │                 │◄───isEmpty()────│                │               │                    │
  │                 │                 │                │               │                    │
  │                 │◄───pull()───────│                │               │                    │
  │                 │                 │                │               │                    │
  │                 │──Mutex_lock()──►│ 🔒             │               │                    │
  │                 │──dequeue────────│                │               │                    │
  │                 │──Mutex_release()►│ 🔓             │               │                    │
  │                 │                 │                │               │                    │
  │                 │──return event──►│                │               │                    │
  │                 │                 │                │               │                    │
  │                 │                 │                │               │──eventDispatch()──►│
  │                 │                 │                │               │                    │
  │                 │                 │                │               │──state processing─►│
  │                 │                 │                │               │                    │
  │                 │                 │                │               │◄─printf result────│
  │                 │                 │                │               │                    │
  │                 │                 │                  │                    │
═══════════════════════════════════════════════════════════════════════════════

DETAILED STATE TRANSITION SEQUENCE
===================================

Example: Complete parsing of decimal number "123.45"

Client              SyncReceptor                 StateMachine              Output
  │                     │                           │                       │
  │ ◄─────────── DIGIT PROCESSING ─────────────────────────────────────────► │
  │                     │                           │                       │
  │──EVDIGIT('1')──────►│                           │                       │
  │                     │──[NONUMBER_STATE]────────►│                       │
  │                     │                           │                       │
  │                     │──exit_NoNumber()─────────►│                       │
  │                     │──ch = '1'─────────────────►│                       │
  │                     │──enter_GotNumber()───────►│                       │
  │                     │──stateID = GOTNUMBER──────►│                       │
  │                     │──enter_ProcessingWholePart()►│                       │
  │                     │──subStateID = WHOLEPART───►│                       │
  │                     │──result = 0*10 + 1 = 1───►│                       │
  │                     │                           │──printf──────────────►│ "Current: 1"
  │◄──────return───────│                           │                       │
  │                     │                           │                       │
  │──EVDIGIT('2')──────►│                           │                       │
  │                     │──[GOTNUMBER_STATE]───────►│                       │
  │                     │──[WHOLEPART_SSTATE]──────►│                       │
  │                     │──exit_ProcessingWholePart()►│                       │
  │                     │──ch = '2'─────────────────►│                       │
  │                     │──enter_ProcessingWholePart()►│                       │
  │                     │──result = 1*10 + 2 = 12──►│                       │
  │                     │                           │──printf──────────────►│ "Current: 12"
  │◄──────return───────│                           │                       │
  │                     │                           │                       │
  │──EVDIGIT('3')──────►│                           │                       │
  │                     │──[GOTNUMBER_STATE]───────►│                       │
  │                     │──[WHOLEPART_SSTATE]──────►│                       │
  │                     │──exit_ProcessingWholePart()►│                       │
  │                     │──ch = '3'─────────────────►│                       │
  │                     │──enter_ProcessingWholePart()►│                       │
  │                     │──result = 12*10 + 3 = 123►│                       │
  │                     │                           │──printf──────────────►│ "Current: 123"
  │◄──────return───────│                           │                       │
  │                     │                           │                       │
  │ ◄─────────── DECIMAL POINT PROCESSING ─────────────────────────────────► │
  │                     │                           │                       │
  │──EVDOT('.')────────►│                           │                       │
  │                     │──[GOTNUMBER_STATE]───────►│                       │
  │                     │──[WHOLEPART_SSTATE]──────►│                       │
  │                     │──exit_ProcessingWholePart()►│                       │
  │                     │──ch = '.'─────────────────►│                       │
  │                     │──enter_ProcessingFractionalPart()►│                 │
  │                     │──subStateID = FRACTIONAL──►│                       │
  │                     │──tensPlace = 0.1──────────►│                       │
  │◄──────return───────│                           │                       │
  │                     │                           │                       │
  │ ◄─────────── FRACTIONAL PART PROCESSING ──────────────────────────────► │
  │                     │                           │                       │
  │──EVDIGIT('4')──────►│                           │                       │
  │                     │──[GOTNUMBER_STATE]───────►│                       │
  │                     │──[FRACTIONAL_SSTATE]─────►│                       │
  │                     │──exit_ProcessingFractionalPart()►│                 │
  │                     │──ch = '4'─────────────────►│                       │
  │                     │──enter_ProcessingFractionalPart()►│                 │
  │                     │──result += 4*0.1 = 123.4─►│                       │
  │                     │──tensPlace = 0.01─────────►│                       │
  │                     │                           │──printf──────────────►│ "Current: 123.4"
  │◄──────return───────│                           │                       │
  │                     │                           │                       │
  │──EVDIGIT('5')──────►│                           │                       │
  │                     │──[GOTNUMBER_STATE]───────►│                       │
  │                     │──[FRACTIONAL_SSTATE]─────►│                       │
  │                     │──exit_ProcessingFractionalPart()►│                 │
  │                     │──ch = '5'─────────────────►│                       │
  │                     │──enter_ProcessingFractionalPart()►│                 │
  │                     │──result += 5*0.01 = 123.45►│                       │
  │                     │──tensPlace = 0.001────────►│                       │
  │                     │                           │──printf──────────────►│ "Current: 123.45"
  │◄──────return───────│                           │                       │
  │                     │                           │                       │
  │ ◄─────────── NUMBER COMPLETION ────────────────────────────────────────► │
  │                     │                           │                       │
  │──EVWHITESPACE──────►│                           │                       │
  │                     │──[GOTNUMBER_STATE]───────►│                       │
  │                     │──exit_ProcessingFractionalPart()►│                 │
  │                     │──exit_GotNumber()────────►│                       │
  │                     │                           │──printf──────────────►│ "Number: 123.45"
  │                     │──enter_NoNumber()────────►│                       │
  │                     │──stateID = NONUMBER───────►│                       │
  │                     │──reset result = 0─────────►│                       │
  │◄──────return───────│                           │                       │

═══════════════════════════════════════════════════════════════════════════════

CONCURRENT ACCESS PROTECTION SEQUENCE
======================================

Scenario: Multiple clients posting events simultaneously to async queue

Client1         Client2         EventQueue        Mutex           AsyncReceptor
  │               │                 │               │                   │
  │ ◄──────────── CONCURRENT EVENT POSTING ──────────────────────────────► │
  │               │                 │               │                   │
  │──post(ev1)───►│                 │               │                   │
  │               │──post(ev2)─────►│               │                   │
  │               │                 │               │                   │
  │               │                 │──lock()──────►│ 🔒 Client1       │
  │               │                 │──enqueue(ev1)─│   Protected      │
  │               │                 │──release()───►│ 🔓               │
  │               │                 │──postSignal()─│                   │
  │               │                 │               │                   │
  │               │                 │──lock()──────►│ 🔒 Client2       │
  │               │                 │──enqueue(ev2)─│   Protected      │
  │               │                 │──release()───►│ 🔓               │
  │               │                 │──postSignal()─│                   │
  │               │                 │               │                   │
  │ ◄──────────── ASYNCHRONOUS CONSUMPTION ───────────────────────────────► │
  │               │                 │               │                   │
  │               │                 │               │                   │◄──taskLoop()
  │               │                 │               │                   │
  │               │                 │◄──isEmpty()──│                   │
  │               │                 │──return false─►│                   │
  │               │                 │               │                   │
  │               │                 │◄──pull()─────│                   │
  │               │                 │──lock()──────►│ 🔒 Dequeue       │
  │               │                 │──dequeue(ev1)─│   Protection     │
  │               │                 │──release()───►│ 🔓               │
  │               │                 │──return ev1──►│                   │
  │               │                 │               │                   │
  │               │                 │               │                   │──process(ev1)
  │               │                 │               │                   │
  │               │                 │◄──pull()─────│                   │
  │               │                 │──lock()──────►│ 🔒 Dequeue       │
  │               │                 │──dequeue(ev2)─│   Protection     │
  │               │                 │──release()───►│ 🔓               │
  │               │                 │──return ev2──►│                   │
  │               │                 │               │                   │
  │               │                 │               │                   │──process(ev2)

═══════════════════════════════════════════════════════════════════════════════

MEMORY MANAGEMENT SEQUENCE
==========================

Object Lifecycle: Creation, Usage, and Destruction following RAII pattern

Client                  Factory                 Object               Mutex
  │                       │                       │                    │
  │ ◄─────────── CREATION PHASE ──────────────────────────────────────► │
  │                       │                       │                    │
  │──Create()────────────►│                       │                    │
  │                       │──malloc()────────────►│                    │
  │                       │                       │                    │
  │                       │──Init()──────────────►│                    │
  │                       │                       │──Mutex_Create()───►│
  │                       │                       │                    │
  │                       │                       │◄──return mutex────│
  │                       │                       │                    │
  │◄──return object──────│                       │                    │
  │                       │                       │                    │
  │ ◄─────────── USAGE PHASE ─────────────────────────────────────────► │
  │                       │                       │                    │
  │──setItsMutex()───────────────────────────────►│                    │
  │──eventDispatch()─────────────────────────────►│                    │
  │                       │                       │                    │
  │ ◄─────────── DESTRUCTION PHASE ───────────────────────────────────► │
  │                       │                       │                    │
  │──Destroy()────────────────────────────────────►│                    │
  │                                                 │                    │
  │                                                 │──Cleanup()────────►│
  │                                                 │                    │
  │                                                 │──Mutex_Destroy()─►│
  │                                                 │                    │
  │                                                 │──free()───────────►│
  │                                                 │                    │

═══════════════════════════════════════════════════════════════════════════════

PATTERN BENEFITS DEMONSTRATED
==============================

1. SINGLE POINT OF CONTROL:
   - All events funnel through one eventDispatch() method
   - Consistent event handling logic regardless of event type

2. THREAD SAFETY:
   - Mutex protection in synchronous version
   - Queue synchronization in asynchronous version

3. FLEXIBILITY:
   - Same state machine logic works for both sync and async
   - Easy to switch between processing modes

4. SCALABILITY:
   - Can handle multiple concurrent clients
   - Event buffering prevents event loss

5. MAINTAINABILITY:
   - Clear separation of concerns
   - RAII memory management pattern
   - Consistent API across both versions
  │                     │──result = 12*10 + 3 = 123►│
  │                     │◄─printf("Current: 123")───│
  │◄──────return───────│                           │
  │                     │                           │
  │──EVWHITESPACE──────►│                           │
  │                     │──GOTNUMBER_STATE─────────►│
  │                     │──exit_ProcessingWholePart()►│
  │                     │──exit_GotNumber()────────►│
  │                     │◄─printf("Number: 123")───│
  │                     │──enter_NoNumber()────────►│
  │                     │──stateID = NONUMBER_STATE►│
  │◄──────return───────│                           │

FRACTIONAL NUMBER PROCESSING (Example: "12.34")
===============================================

Event          State Transition                    Result
──────         ──────────────────                  ──────
EVDIGIT('1')   NONUMBER → GOTNUMBER/WHOLEPART     result = 1
EVDIGIT('2')   GOTNUMBER/WHOLEPART (stay)         result = 12
EVDOT('.')     GOTNUMBER/WHOLEPART → FRACTIONAL   result = 12
EVDIGIT('3')   GOTNUMBER/FRACTIONAL (stay)        result = 12.3
EVDIGIT('4')   GOTNUMBER/FRACTIONAL (stay)        result = 12.34
EVWHITESPACE   GOTNUMBER → NONUMBER               Number: 12.34

MEMORY MANAGEMENT SEQUENCE
==========================

Client                  Factory                 Object               Mutex
  │                       │                       │                    │
  │──Create()────────────►│                       │                    │
  │                       │──malloc()────────────►│                    │
  │                       │                       │                    │
  │                       │──Init()──────────────►│                    │
  │                       │                       │                    │
  │                       │                       │──Mutex_Create()───►│
  │                       │                       │                    │
  │                       │                       │◄──return mutex────│
  │                       │                       │                    │
  │◄──return object──────│                       │                    │
  │                       │                       │                    │
  │                                                                    │
  │                    [Object Usage]                                  │
  │                                                                    │
  │──Destroy()────────────────────────────────────►│                    │
  │                                                 │                    │
  │                                                 │──Cleanup()────────►│
  │                                                 │                    │
  │                                                 │──Mutex_Destroy()─►│
  │                                                 │                    │
  │                                                 │──free()───────────►│
  │                                                 │                    │

CONCURRENT ACCESS PROTECTION (Asynchronous)
===========================================

Client1         Client2         EventQueue        Mutex           AsyncReceptor
  │               │                 │               │                   │
  │──post(ev1)───►│                 │               │                   │
  │               │──post(ev2)─────►│               │                   │
  │               │                 │               │                   │
  │               │                 │──lock()──────►│                   │
  │               │                 │──enqueue(ev1)─│                   │
  │               │                 │──release()───►│                   │
  │               │                 │──postSignal()─│                   │
  │               │                 │               │                   │
  │               │                 │──lock()──────►│                   │
  │               │                 │──enqueue(ev2)─│                   │
  │               │                 │──release()───►│                   │
  │               │                 │──postSignal()─│                   │
  │               │                 │               │                   │
  │               │                 │               │                   │◄──taskLoop()
  │               │                 │               │                   │
  │               │                 │◄──pull()─────│                   │
  │               │                 │──lock()──────►│                   │
  │               │                 │──dequeue(ev1)─│                   │
  │               │                 │──release()───►│                   │
  │               │                 │──return ev1──►│                   │
  │               │                 │               │                   │
  │               │                 │               │                   │──process(ev1)
  │               │                 │               │                   │
  │               │                 │◄──pull()─────│                   │
  │               │                 │──lock()──────►│                   │
  │               │                 │──dequeue(ev2)─│                   │
  │               │                 │──release()───►│                   │
  │               │                 │──return ev2──►│                   │
  │               │                 │               │                   │
  │               │                 │               │                   │──process(ev2)
